<?php

namespace AppBundle\Controller;

use AppBundle\Entity\Author;
use AppBundle\Entity\Posts;
use AppBundle\Form\PostsType;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Security;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Sensio\Bundle\FrameworkExtraBundle\Configuration\Route;
use Symfony\Component\HttpFoundation\File\Exception\FileException;
use Symfony\Component\HttpFoundation\Request;

/**
 * @Route("posts")
 */
class PostController extends Controller
{
    /**
     * @Route("",name="posts_index")
     */
    public function indexAction()
    {

//===============Afficher Posts=================================
        $posts = $this->getDoctrine()
            ->getRepository(Posts::class)
            ->findAll();

        return $this->render('Posts/index.html.twig', ['posts' => $posts]);
    }

    /**
     * @Route("/create",name="posts_create")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function createAction(Request $request)
    {
//=============Insertion Posts=================================

        $em = $this->getDoctrine()->getManager();
        $posts = new Posts();
        $formPosts = $this->createForm(PostsType::class, $posts);
        $formPosts->handleRequest($request);
        if ($formPosts->isSubmitted()) {
            $file = $posts->getFile();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            try {
                $file->move(
                    $this->getParameter('post_images_directory'),
                    $fileName
                );
            }
            catch (FileException $e) {
                throw new FileException();
            }
            $posts->setFile($fileName);

            $em->persist($posts);
            $em->flush();
            return $this->redirectToRoute('posts_index');
        }

        return $this->render('Posts/create.html.twig', ['formPosts' => $formPosts->createView()]);
//=============end insertion ===================================
    }

    /**
     * @Route("/delete/{id}",name="posts_delete")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function deleteAction(Posts $posts)
    {
        return $this->render('Posts/supprimer.html.twig', [
            'post' => $posts
        ]);
    }

    /**
     * @Route("/delete-confirmation/{id}",name="posts_delete_confirmation")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function deleteConfirmation(Posts $posts)
    {
        unlink ( $this->getParameter("post_images_directory").'/'.$posts->getFile() );
        $em = $this->getDoctrine()->getManager();
        $em->remove($posts);
        $em->flush();

        return $this->redirectToRoute('posts_index');
    }

    /**
     * @Route("/update/{id}",name="posts_update")
     * @Security("has_role('ROLE_ADMIN')")
     */
    public function update(Posts $posts, Request $request)
    {
        $em = $this->getDoctrine()->getManager();
        $oldFile = $posts->getFile();
        $formPosts = $this->createForm(PostsType::class, $posts);
        $formPosts->handleRequest($request);
        if ($formPosts->isSubmitted()) {
            unlink ( $this->getParameter("post_images_directory").'/'.$oldFile );
            $file = $posts->getFile();
            $fileName = $this->generateUniqueFileName().'.'.$file->guessExtension();

            try {
                $file->move(
                    $this->getParameter('post_images_directory'),
                    $fileName
                );
            }
            catch (FileException $e) {
                throw new FileException();
            }
            $posts->setFile($fileName);

            $em->persist($posts);
            $em->flush();
            return $this->redirectToRoute('posts_index');
        }

        return $this->render('Posts/modifier.html.twig', ['formPosts' => $formPosts->createView()]);

    }

    /**
     * @return string
     */
    private function generateUniqueFileName()
    {
        // md5() reduces the similarity of the file names generated by
        // uniqid(), which is based on timestamps
        return md5(uniqid());
    }
}
